/*
* This file is generated by com.craftinginterpreters.tool.GenerateAst
*/

package com.craftinginterpreters.lox;

import java.util.List;

public abstract class Stmt {

	public interface Visitor<R> {
		R visitBlockStmt(Block stmt);
		R visitExpressionStmt(Expression stmt);
		R visitPrintStmt(Print stmt);
		R visitVarStmt(Var stmt);
	}

	public static class Block extends Stmt {
		Block(List<Stmt> statements) {
			this.statements = statements;
		}

		final List<Stmt> statements;

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitBlockStmt(this);
		}
	}

	public static class Expression extends Stmt {
		Expression(Expr Expression) {
			this.Expression = Expression;
		}

		final Expr Expression;

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitExpressionStmt(this);
		}
	}

	public static class Print extends Stmt {
		Print(Expr Expression) {
			this.Expression = Expression;
		}

		final Expr Expression;

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitPrintStmt(this);
		}
	}

	public static class Var extends Stmt {
		Var(Token name, Expr initializer) {
			this.name = name;
			this.initializer = initializer;
		}

		final Token name;
		final Expr initializer;

		@Override
		<R> R accept(Visitor<R> visitor) {
			return visitor.visitVarStmt(this);
		}
	}


	abstract <R> R accept(Visitor<R> visitor);
}
