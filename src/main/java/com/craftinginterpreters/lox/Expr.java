/*
* This file is generated by com.craftinginterpreters.tool
*/

package com.craftinginterpreters.lox;

public abstract class Expr {

	public interface Visitor<R> {

		R visitBinaryExpr(Binary expr);
		R visitGroupingExpr(Grouping expr);
		R visitLiteralExpr(Literal expr);
		R visitUnaryExpr(Unary expr);
		R visitTernaryExpr(Ternary expr);
	}
	public static class Binary extends Expr {

		Binary(Expr left, Token operator, Expr right) {

			this.left = left;
			this.operator = operator;
			this.right = right;
		}

		final Expr left;
		final Token operator;
		final Expr right;

		@Override
		<R> R accept(Visitor<R> visitor) {

			return visitor.visitBinaryExpr(this);
		}
	}
	public static class Grouping extends Expr {

		Grouping(Expr expression) {

			this.expression = expression;
		}

		final Expr expression;

		@Override
		<R> R accept(Visitor<R> visitor) {

			return visitor.visitGroupingExpr(this);
		}
	}
	public static class Literal extends Expr {

		Literal(Object value) {

			this.value = value;
		}

		final Object value;

		@Override
		<R> R accept(Visitor<R> visitor) {

			return visitor.visitLiteralExpr(this);
		}
	}
	public static class Unary extends Expr {

		Unary(Token operator, Expr right) {

			this.operator = operator;
			this.right = right;
		}

		final Token operator;
		final Expr right;

		@Override
		<R> R accept(Visitor<R> visitor) {

			return visitor.visitUnaryExpr(this);
		}
	}
	public static class Ternary extends Expr {

		Ternary(Expr condition, Expr thenBranch, Expr elseBranch) {

			this.condition = condition;
			this.thenBranch = thenBranch;
			this.elseBranch = elseBranch;
		}

		final Expr condition;
		final Expr thenBranch;
		final Expr elseBranch;

		@Override
		<R> R accept(Visitor<R> visitor) {

			return visitor.visitTernaryExpr(this);
		}
	}

	abstract <R> R accept(Visitor<R> visitor);
}
