/*
 * This file will be used for handwriting each class definition, field declaration, constructor, and initializer.
 * */

package com.craftinginterpreters.tool;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {

    private static void defineAst(String outputDir, String baseName, List<String> types) throws IOException {
        String path = outputDir + File.separator + baseName + ".java";
        PrintWriter writer = new PrintWriter(path);

        // Heading
        writer.println("/*");
        writer.println("* This file is generated by " + GenerateAst.class.getCanonicalName());
        writer.println("*/");
        writer.println();
        writer.println("package com.craftinginterpreters.lox;");
        writer.println();
        writer.println("import java.util.List;");
        writer.println();
        writer.println("public abstract class " + baseName + " {");
        writer.println();

        defineVisitor(writer, baseName, types);

        for (String type : types) {
            String className = type.split(":")[0].trim();
            String fields = type.split(":")[1].trim();
            defineType(writer, baseName, className, fields);
        }

        // Base accept() method for the abstract class
        writer.println();
        writer.println("\tabstract <R> R accept(Visitor<R> visitor);");

        writer.println("}");
        writer.close();
    }

    private static void defineType(PrintWriter writer, String baseName, String className,String fieldList) {
        writer.println("\tpublic static class " + className + " extends " + baseName + " {");

        //Constructor
        writer.println("\t\t" + className + "(" + fieldList + ") {");
        for (String field : fieldList.split(", ")) {
            String name = field.split(" ")[1].trim();
            writer.println("\t\t\tthis." + name + " = " + name + ";");
        }
        writer.println("\t\t}");

        //Fields
        writer.println();
        for (String field : fieldList.split(", ")) {
            writer.println("\t\tfinal " + field + ";");
        }

        // The accept method from the Visitor Pattern
        writer.println();
        writer.println("\t\t@Override");
        writer.println("\t\t<R> R accept(Visitor<R> visitor) {");
        writer.println("\t\t\treturn visitor.visit" + className + baseName + "(this);");
        writer.println("\t\t}");

        writer.println("\t}");
        writer.println();
    }

    private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) {
        writer.println("\tpublic interface Visitor<R> {");
        for (String type : types) {
            String className = type.split(":")[0].trim();
            writer.println("\t\tR visit" + className + baseName + "(" + className + " " + baseName.toLowerCase() + ");");
        }
        writer.println("\t}");
        writer.println();
    }

    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast <output directory>");
            System.exit(64);
        }
        String outputDirectory = args[0];
        defineAst(outputDirectory, "Expr", Arrays.asList(
                "Ternary  : Expr condition, Expr thenBranch, Expr elseBranch",
                "Binary   : Expr left, Token operator, Expr right",
                "Grouping : Expr expression",
                "Literal  : Object value",
                "Unary    : Token operator, Expr right",
                "Variable : Token name",
                "Assign   : Token name, Expr value",
                "Logical  : Expr left, Token operator, Expr right",
                "Call     : Expr callee, Token paren, List<Expr> arguments",
                "Get      : Expr object, Token name",
                "Set      : Expr object, Token name, Expr value",
                "Super    : Token keyword, Token method",
                "This     : Token keyword"

        ));

        defineAst(outputDirectory, "Stmt", Arrays.asList(
                "Block      : List<Stmt> statements",
                "Expression : Expr Expression",
                "Print      : Expr Expression",
                "Var        : Token name, Expr initializer",
                "If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
                "While      : Expr condition, Stmt body",
                "Function   : Token name, List<Token> params, List<Stmt> body",
                "Return     : Token keyword, Expr value",
                "Class      : Token name, Expr.Variable superclass, List<Stmt.Function> methods"
        ));
    }
}